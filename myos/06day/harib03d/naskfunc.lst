     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 	
     5 00000000                                 [INSTRSET "i486p"]				; 
     6 00000000                                 [BITS 32]						; 
     7 00000000                                 [FILE "naskfunc.nas"]			;
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 
    15                                          [SECTION .text]					;[SECTION .text]	表示程序段开始 [SECTION .data]	表示数据段开始
    16 00000000                                 
    17 00000000                                 _io_hlt:	; void io_hlt(void);
    18 00000000 F4                              		HLT		;使程序停止运行，处理器进入暂停状态，不执行任何操作，不影响标志。当RESET线上有复位信号、CPU响应非屏蔽中断、CPU响应可屏蔽中断3种情况之一时，CPU脱离暂停状态，执行HLT的下一条指令
    19 00000001 C3                              		RET
    20 00000002                                 
    21 00000002                                 _io_cli:	; void io_cli(void);
    22 00000002 FA                              		CLI		;禁止中断发生（就是修改flag寄存器中中断标志位）
    23 00000003 C3                              		RET
    24 00000004                                 
    25 00000004                                 _io_sti:	; void io_sti(void);
    26 00000004 FB                              		STI		;允许中断	（就是修改flag寄存器中中断标志位）
    27 00000005 C3                              		RET
    28 00000006                                 
    29 00000006                                 _io_stihlt:	; void io_stihlt(void);
    30 00000006 FB                              		STI
    31 00000007 F4                              		HLT
    32 00000008 C3                              		RET
    33 00000009                                 
    34 00000009                                 _io_in8:	; int io_in8(int port);
    35 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    36 0000000D B8 00000000                     		MOV		EAX,0
    37 00000012 EC                              		IN		AL,DX					;从DX里数值对应的端口读入AL能存入的位数的数（8位）
    38 00000013 C3                              		RET
    39 00000014                                 
    40 00000014                                 _io_in16:	; int io_in16(int port);
    41 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    42 00000018 B8 00000000                     		MOV		EAX,0
    43 0000001D 66 ED                           		IN		AX,DX					;从DX里数值对应的端口读入AX能存入的位数的数（16位）
    44 0000001F C3                              		RET
    45 00000020                                 
    46 00000020                                 _io_in32:	; int io_in32(int port);
    47 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    48 00000024 ED                              		IN		EAX,DX
    49 00000025 C3                              		RET
    50 00000026                                 
    51 00000026                                 _io_out8:	; void io_out8(int port, int data);
    52 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    53 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    54 0000002E EE                              		OUT		DX,AL					;将AL里的数据输出到DX里数值对应的端口	
    55 0000002F C3                              		RET
    56 00000030                                 
    57 00000030                                 _io_out16:	; void io_out16(int port, int data);
    58 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    59 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    60 00000038 66 EF                           		OUT		DX,AX
    61 0000003A C3                              		RET
    62 0000003B                                 
    63 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    64 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    65 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    66 00000043 EF                              		OUT		DX,EAX
    67 00000044 C3                              		RET
    68 00000045                                 
    69 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    70 00000045 9C                              		PUSHFD		; PUSH EFLAGS 把EFLAGS寄存器（32位）的内容压入栈
    71 00000046 58                              		POP		EAX	;从栈中弹出数据存入EAX
    72 00000047 C3                              		RET
    73 00000048                                 
    74 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    75 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    76 0000004C 50                              		PUSH	EAX	;把EAX内容压入栈
    77 0000004D 9D                              		POPFD		; POP EFLAGS 从栈中弹出4字节存入EFLAGS
    78 0000004E C3                              		RET
    79 0000004F                                 ;将源操作数中的值加载到全局描述符表格寄存器 (GDTR) 或中断描述符表格寄存器 (IDTR)。源操作数指定 6 字节内存位置，它包含全局描述符表格 (GDT) 或中断描述符表格 (IDT) 的基址（线性地址）与限制（表格大小，以字节计）。如果操作数大小属性是 32 位，则将 16 位限制（6 字节数据操作数的 2 个低位字节）与 32 位基址（数据操作数的 4 个高位字节）加载到寄存器。如果操作数大小属性是 16 位，则加载 16 位限制（2 个低位字节）与 24 位基址（第三、四、五字节）。这里，不使用操作数的高位字节，GDTR 或 IDTR 中基址的高位字节用零填充。		
    80 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    81 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    82 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    83 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    84 0000005E C3                              		RET
    85 0000005F                                 
    86 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    87 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    88 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    89 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    90 0000006E C3                              		RET
    91 0000006F                                 
    92 0000006F                                 
